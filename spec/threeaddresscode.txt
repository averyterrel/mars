The conversion from Mars AST (MAST) -> Three Address Code (TAC) is the first step in Mars' Deimos module.
Each node of the MAST is converted to the TAC, which is then used to compile into Aphelion.

An example program and it's AST and TAC conversion, with the aphelion conversion after:

main :: fn() {
	a := 1 + 2
	return
}

root:
	function: 
		{name = main, arguments = {}}
		statement:
			{name = a, type = assignment}
			operator:
				{type = .addition}
				expression:
					{value = 1, type = .literal_int}
				expression:
					{value = 2, type = .literal_int}
		statement:
			{name = return, type = keyword}

This is then converted into:

FUNCTION main
LOAD_LITERAL t0, 1
LOAD_LITERAL t1, 2
ADD t2, t0, t1
RETURN

The TAC is a pseudo-assembly, with an infinite amount of registers. More complex programs could have
thousands of different registers, that are then reduced down.

This is then converted to the following assembly:
main:
	li ra, 1
	li rb, 2
	addr rc, ra, rb
	ret

Other programs, like branching programs, will have more complex TACs.

e.g:

import nsys "neptune"

main :: fn () {
	test(4)
}

test :: fn(a : int) {
	if add(a, 3) > 5 {
		nsys.printf("we ballin")
	}
}

add :: fn (a, b: int) -> int {
	return a + b
}

TAC:

INSERT_SYMBOLS "neptune"

FUNCTION main
LOAD_LITERAL t0, 4
PASS t0
LABEL_ADDRESS t1, test
CALL t1
RETURN

FUNCTION test
LABEL_ADDRESS t2, add
ARGUMENT t3, 0 //get argument 0 from the stack
PASS t3
LOAD_LITERAL t4, 3
PASS t4
CALL t2
LOAD_RETURN t8, 0 //gets return value 0 from the stack
LOAD_LITERAL t9, 5
BRANCH_BLE test_1, t8, t9 //flip this to be less than or equal to, as opposed to greater than
FUNCTION test_0
//add(a + 3) > 5 succeeded
TABLE_OFFSET t10, neptune
TABLE_ADDRESS t11, t10, printf
LOAD_DATA t12, 0 //load data value 0
PASS t12
CALL t11 //call nsys.printf
FUNCTION test_1
RETURN

FUNCTION add
ARGUMENT t5, 0
ARGUMENT t6, 0
ADD t7, t6, t5
PASS_RETURN t7
RETURN

DATA
"we ballin"

Aphelion:

main:
	li ra, 0x4
	push ra
	li rb, test
	ljal rb, 0x0
	ret

test:
	li rb, add
	lw ra, sp, -0x4 //argument 0 is at offset -4
	push ra
	li ra, 3
	push ra
	ljal rb, 0x0
	
	li rb, 5
	test ra, rb
	ble test_1
test_0:
	li ra, neptune
	li rb, 0x4 //offset from neptune table to printf address 
	addr ra, ra, rb
	//ra now contains the value to call nsys.printf
	li rb, data
	li rc, 0x0
	addr rb, rb, rc 
	//rb now contains address of "we ballin"
	push rb
	ljal ra	
test_1:
	ret

add:
	lw ra, sp, -0x4 //arg 0
	lw rb, sp, -0x8 //arg 1
	addr rc, rb, ra
	pop rd //stack spill to allow rc to go on the stack
	push rc 
	push rd //push return value back
	ret

data:
.utf8 "we ballin"

neptune:
.u64 some_function_address_here
.u64 printf_address_here