sanitization handlers are a way to implement various safety checks at runtime
in a platform-agnostic way. the compiler will insert these checks and call the
provided handler if the check fails.

array index bounds check
    verify that the index of an array access is within the bounds of the 
    object whenever possible (indexing arrays or slices, not pointers).

    enable flag     -sanitize=array_bounds
    signature       fn #sanitize_handler("array-bounds") 
                       (line, col: int, filename: []let u8, upper, lower, index: int)

null dereference
    verify that a reference type (pointers and slices) refers to non-null memory
    before dereferencing or indexing.

    enable flag     -sanitize=null-deref
    signature       fn #sanitize_handler("null-deref")
                       (line, col: int, filename: []let u8)