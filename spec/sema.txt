for the module you would like to compile:
scan the module for import statements. if a module imports another module, lex and parse that module. do this recursively.
use this to construct an directed import graph. If there are cycles in this graph, produce an error.
assuming no cycles: check each module in order of dependencies (before a module is checked, all of its dependencies must be checked first)

for each module in the import graph:
do a shallow scan of the global declarations, register all of them with their names in the global entity table.
this is so that each global entity is *known to exist* when checking.
then, after this shallow scan, deep-check every declaration in order. When a global entity is referenced but hasn't been checked yet,
pause and check that global entity to retrieve information about it. A "visited" bit can be used to prevent value cycles in global declarations.

all variables should be tied to an Entity. each scope has an EntityTable.

    typedef struct Entity {
        Ast declaration; // what statement was it declared in?
        MarsType* T; // what type does it have?
        bool is_type; // is this expression a type?
        bool mutable; // is this entity mutable?
    ...
    } Entity;

    typedef struct EntityTable {
    AST origin; // where does this scope start? NULL_AST if global scope
    EntityTable* parent; // because entities from previous scopes are visible

        ((dynarray or hashmap of 'Entity's))
    ((probably a dynarray of 'EntityTable*'s, for the children?))
    } EntityTable;

each new scope creates a new EntityTable

For checking an expression:
use a struct similar to this one.

    typedef struct CheckedExpr {
        AST expr;
        MarsType* T;
        bool is_type_expr; // true if the expression is a type expression, e.g. ^let int
        bool addressable; // can its pointer be taken? e.g. a variable, array access, struct access, etc.
        bool mutable; // can it be assigned to?
        ...
    } CheckedExpr;

with this, checking can be done recursively.

    CheckedExpr check_expression(EntityTable* et, MarsType* expected);
                                                  ^--- used to pass forward expected types, like for implicit enum variants ( .variant ) 
                                                       or structure literals ( {1, 2, 3} ). NULL if no type is specifically expected.
