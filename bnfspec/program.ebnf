<program> ::= <module_stmt> <import_stmt>* <stmts>
<module_stmt> ::= <ws> "module" <fws> <identifier> <ws> ";" <ws>
<import_stmt> ::= <ws> "import" (<fws> <identifier> | E) <ws> <string> <ws> ";" <ws>

<stmts> ::= <stmts> <ws> <stmt> <ws> | <ws> <stmt> <ws> | E

<stmt> ::= <decl> | <return> | <if> | <while> | <assignment> ";" <ws> | 
           <aggregate> | <enum> | <for_type_one> | <for_type_two> | <asm> | <stmt_block> |
           <switch> | <break> | <fallthrough> | <type_stmt>

<decl> ::= ("let" | "mut") <fws> <identifier> <ws> (":" <ws> <type> <ws> | E) "=" <ws> <r_value> <ws> ";"
<return> ::= "return" <fws> (<identifier> | <expression> | <literal>) <ws> ";"
<if> ::= ("if"|"when") <fws> <ws> <expression> <ws> <stmt_block>

<while> ::= "while" <fws> (<ws> <expression> <ws> | E) <stmt_block>
<assignment> ::= <expression> <ws> <assign_op> <ws> <expression> <ws>

<else> ::= "else" <fws> (<if> | <stmt_block>)

/* TODO: for_type_one is hacky. this does not force double-sided paren. FIX */

<for_type_one> ::= "for" <fws> ("(" | E) (<assignment> | <decl> | E) <ws> ";" <ws>
          <expression> <ws> ";" <ws> 
          ((<ws> <assignment> <ws> "," <ws>)* <ws> <assignment> <ws> | E) (";" | E) (")" | E) <stmt_block>
/* TODO: for_type_two should support (x in y..(<|=)z) correctly. */
<for_type_two> ::= "for" <fws> <identifier> (<ws> ":" <ws> <type> <ws> | E) <ws> "in" <ws> 
                <expression> <ws> ("..<" | "..=") <ws> <expression> <stmt_block>

<type_stmt> ::= "type" <fws> <identifier> <ws> "=" <ws> <type> <ws> ";" <ws>

<stmt_block> ::= <ws> "{" <ws> <stmts> <ws> "}" <ws>

<switch> ::= ("switch"|"which") <fws> <expression> <ws> "{" <ws>
            (<ws> "case" <fws> (<ws> <expression> <ws> "," <ws>)* <expression> ("," | E) <ws> ":" <ws> <stmts> <ws>)*
            (<ws> "case" <ws> ":" <ws> <stmts> <ws>)*

<break> ::= "break" <ws> ";" <ws>
<fallthrough> ::= "fallthrough" <ws> ";" <ws>

<asm> ::= "asm" <ws> "(" <ws>
    (<asm_param> "," <ws>)* <asm_param>
    <ws> ")" <ws> "{" <ws> 
    (<ws> <string> <ws> "," <ws>)+ <ws> "}" <ws>

<asm_param> ::= <expression> <ws> ("->" | "<-" | "<->") <ws> <string> <ws>

<assign_op> ::= "+=" | "-=" | "*="  | "/=" | "%="  | "%%=" | 
                "&=" | "|=" | "~|=" | "~=" | "<<=" | ">>=" | "="

<r_value> ::= <fn> | <literal> | <expression> | "---"

<ws> ::= <fws> | E
<fws> ::= ("\n" | "\r" | " " | "\t")+