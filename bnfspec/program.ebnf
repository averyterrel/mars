<program> ::= <module_stmt> <import_stmt>* <stmts>
<module_stmt> ::=  "module"  <identifier>  ";" 
<import_stmt> ::=  "import" (<identifier> | E) <string> ";" 

<stmt> ::= <decl> | <return> | <if> | <else> | <while> | 
           <aggregate> | <enum> | <for_type_one> | <for_type_two> | <asm> | <stmt_block> |
           <switch> | <break> | <fallthrough> | <extern> | <defer> | <continue> | ";" |
           <assignment> ";" | <expression> ";"

<type_decl> ::= "type" <identifier> "=" <unary_expression> ";"

<simple_stmt> ::= <decl> | <assignment> | <expression>

<extern> ::= "extern" <stmt>

<defer> ::= "defer" <stmt> 

<label> ::= <identifier> ":" <stmt>

<continue> ::= "continue" (<identifier> | E) ";"
<break> ::= "break" (<identifier> | E) ";" 
<fallthrough> ::= "fallthrough" ";" 

<stmt_block> ::=  "{" <stmt>* "}"

<control_flow_block> ::= <stmt_block> | "do" <stmt>

<fn> ::= <fn_type> <stmt_block>

<decl> ::= ("let" | "mut") (<identifier> ",")* <identifier> ("," | E)  (":" <type> | E) ("=" (<expression> | "---") | E) ";"
<return> ::= "return" <expression> ";"
<if> ::= "if" <expression> <control_flow_block>

<while> ::= "while" (<expression>  | E) <control_flow_block>
<assignment> ::= (<unary_expression> ",")* <unary_expression> <assign_op> (<expression> | "---")

<else> ::= "else" (<if> | <stmt_block>)

/* TODO: for_type_one is hacky. this does not force double-sided paren. FIX */

<for_type_one> ::= "for" <simple_stmt> ";" <expression>  ";" (( <assignment> "," )* <assignment> ("," | E) | E) <control_flow_block>
/* TODO: for_type_two should support (x in y..(<|=)z) correctly. */
<for_type_two> ::= "for" <identifier> (":" <type> | E) "in" <expression>  ("..<" | "..=")  <expression> <control_flow_block>

<switch> ::= "switch" <expression> "{" 
             ("case" (<expression> ",")* <expression> ("," | E))* ":" <stmt>+
             ("case" ":" <stmt>+ )* "}"


<asm> ::= "asm" "(" (<asm_param> ",")* <asm_param> ("," | E) ")" 
    "{" (<string> ",")* <string> ("," | E) "}" 

<asm_param> ::= <identifier> ("->" | "<-" | "<->") <string> 

<assign_op> ::= "+=" | "-=" | "*="  | "/=" | "%="  | "%%=" | 
                "&=" | "|=" | "~|=" | "~=" | "<<=" | ">>=" | "="