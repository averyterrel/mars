/*strings.ebnf*/
<char_lit> ::= "'" <char> "'"
<string> ::= "\"" <char_list> "\"" | <string> <string>
<char_list> ::= <char_list> <char> | <char>
<char> ::= <unicode> | "\\n" | "\\r" | "\\\"" | "\\'" | "\\\\" | <unicode_form> | <hex_form>
<unicode_form> ::= "\\u" <hex_digit> <hex_digit> <hex_digit> <hex_digit> | "\\U" <hex_digit> <hex_digit> <hex_digit> <hex_digit> <hex_digit> <hex_digit> <hex_digit> <hex_digit>
<hex_form> ::= "\\x" <hex_digit> <hex_digit>
<hex_digit> ::= [0-9] | [A-F] | [a-f]
<digit> ::= [0-9]
<unicode> ::= "unicode"
<identifier_chars> ::= [A-Z] | [a-z] | [0-9] | "_"
<identifier> ::= ([A-Z] | [a-z]) <identifier_chars>*
/*literals.ebnf*/
<literal> ::= <char_lit> |
              <string> |
              <numeric_literal>

<numeric_literal> ::= <digit>+ |
                      "0x" <hex_digit>+ |
                      "0X" <hex_digit>+ |
                      <float_literal>
                      
<float_literal> ::= <digit>+ ("." | "e") <digit>+
/*program.ebnf*/
<program> ::= <module_stmt> <stmts>
<module_stmt> ::= <ws> "module" <fws> <identifier> <ws> ";" <ws>
<stmts> ::= <stmts> <ws> <stmt> <ws> | <ws> <stmt> <ws> | E

<stmt> ::= <decl> | <return> | <if> | <while> | <assignment>

<decl> ::= ("let" | "mut") <fws> <identifier> <ws> (":" <ws> <type> <ws> | E) "=" <ws> <r_value> <ws> ";"
<return> ::= "return" <fws> (<identifier> | <expression> | <literal>) <ws> ";"
<if> ::= "if" <ws> ("(" <ws> <expression> <ws> ")" | <ws> <expression> <ws>) 
              <ws> "{" <ws> <stmts> <ws> "}" <ws>

<while> ::= "while" <ws> ("(" <ws> <expression> <ws> ")" | <ws> <expression> <ws>) 
              <ws> "{" <ws> <stmts> <ws> "}" <ws>
<assignment> ::= <identifier> <ws> <assign_op> <ws> <expression> <ws> ";" <ws>

<assign_op> ::= "+=" | "-=" | "*="  | "/=" | "%="  | "%%=" | 
                "&=" | "|=" | "~|=" | "~=" | "<<=" | ">>=" | "="


<r_value> ::= <fn> | <literal> | <expression> | "---"

<ws> ::= <fws> | E
<fws> ::= ("\n" | "\r" | " " | "\t")+
/*expressions_types.ebnf*/
<fn> ::= <fn_type> <ws> "{" <ws> <stmts> <ws> "}"

<fn_type> ::= "fn" <ws> "(" <ws> (<param_list> | E) <ws> ")" (<ws> "->" (<ws> <type> <ws> | <ws> "(" <param_list> ")" <ws>) | E)

<param> ::= <identifier> <ws> ":" <ws> <type> <ws>
<multi_param> ::= (<ws> <identifier> <ws> ",")+ <ws> <identifier> <ws> ":" <ws> <type> <ws>
<param_list> ::= <param_list> <ws> "," <ws> <param> | 
                 <param_list> <ws> "," <ws> <multi_param> | 
                 <param> | <multi_param>

<type> ::= "i8" | "i16" | "i32" | "i64" | "int" |
           "u8" | "u16" | "u32" | "u64" | "uint" |
           "f16" | "f32" | "f64" | "float" | "bool" | <identifier> | ("^" | "[]") <ws> ("mut" | "let") (<fws> <type> | E) |
           "[" <ws> (<digit>+ | E) <ws> "]" <type> 

<expression> ::= "(" <ws> <expression> <ws> ")" | <expression> <binop> <expression> | <ws> <identifier> <ws> |
                 <unop> <ws> <expression> | <expression> <ws> "^" |
                 <expression> <ws> "[" <ws> (<digit>+ | <identifier>) <ws> ":" <ws> (<digit>+ | <identifier>) <ws> "]" |
                 ("cast" | "bitcast") <ws> "(" <ws> <type> <ws> ")" <ws> <expression> | <ws> <numeric_literal> <ws> 

<binop> ::= "*" | "/" | "%" | "%%" | "&" | "<<" | ">>" | "~|" |
               "+" | "-" | "|" | "~" |
               "==" | "!=" | "<" | ">" | "<=" | ">=" |
               "&&" | "||" |
               "[" <ws> (<digit>+ | <identifier>) <ws> "]" |
               "->" | "::" | "."

<unop> ::= "&" | "-" | "~" | "!"