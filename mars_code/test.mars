module test;

import mem "memory";
import neptune "neptune";

let println = neptune::kprintln;
let printf = neptune::kprintf;

// #block_symbol sets the assembly label of a 
// function's code block to something specific

let main = fn #block_symbol("main") () {

    let str = "bruh";
    let str2 = "bruh2";

    if mem::str_eq(str, str2) {
        println("equal");
    } else {
        println("not equal");
    }

    for mut i = 0; i < 10; i += 1; { printf("%int, ", {&i}); } printf("\n");
    for i in 0..<10                { printf("%int, ", {&i}); } printf("\n");
    for i in 0..=9                 { printf("%int, ", {&i}); } printf("\n");
    for i: u64 in 0..<10           { printf("%u64, ", {&i}); } printf("\n");

    let x = 1;
    let x: int = struct {x, y:int; b: []u8;} {bruh};

    mut y = 2;
    mut y: int = 2;

    while true {}
};



type ll_node = struct {
    content: int;
    next: ^ll_node;
};

type ll_node_2 = struct {
    content: int;
    next: ^ll_node_2;
};

// ll_node == ll_node_2, structural equality!

type ll_node_distinct = distinct struct {
    content: int;
    next: ^ll_node_distinct;
};

// ll_node_distinct != ll_node
