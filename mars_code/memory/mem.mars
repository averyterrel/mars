module memory;

copy :: fn(to, from: rawptr, len: uint) {
    
    to_byte   := cast(^u8) to;
    from_byte := cast(^u8) from;
    to_stop   := to_byte + cast(^u8) len

    while to_byte != to_stop {

        $to_byte = $from_byte;

        from_byte += 1;
        to_byte += 1;
    }
}

copy_asm :: fn(to, from: rawptr, len: uint) {

    // calling convention states that to, from, and len should be in ra, rb, and rc respectively.
    // safer way would be `asm (to -> "ra", from -> "rb", len -> "rc")` but a bad compiler might add some overhead
    asm () {
        "add rc, ra, rc",
        "cmp ra, rc",
        "beq memcopy_asm_internal_ret",
        "memcopy_asm_internal_while:",
            "lb rd, rb, 0",
            "sb rd, ra, 0",
            "add ra, ra, 1",
            "add rb, rb, 1",
            "cmp ra, rc",
            "bne memcopy_asm_internal_while",
        "memcopy_asm_internal_ret:",
    }

}

equal :: fn(block1, block2: rawptr, len: uint) -> bool {

    block1_byte := cast(^u8) block1;
    block2_byte := cast(^u8) block2;
    block1_stop := block1_byte + cast(^u8) len;

    while block1_byte != block1_stop {

        if $block1_byte != $block2_byte {
            return false;
        }

        block1_byte += 1;
        block2_byte += 1;
    }

    return true;
}

set :: fn(dest: rawptr, len: uint, val: u8) {

    cursor    := cast(^u8) dest;
    stop      := cursor + cast(^u8) len;

    while cursor != stop {
        $cursor = val
        cursor += 1;
    }
}