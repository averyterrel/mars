module memory;

let copy = fn(to: ^mut, from: ^let, len: uint) {
    if (to == null || from == null || len == 0) {
        return;
    }
    
    mut to_byte: ^mut u8 = to;
    mut from_byte: ^let u8 = from;
    let to_stop = to_byte + len;

    while (to_byte != to_stop) {
        to_byte^ = from_byte^;
        from_byte += 1;
        to_byte += 1;
    }
};

let equal = fn(block1, block2: ^let, len: uint) -> bool {
    mut block1_byte = cast(^let u8) block1;
    mut block2_byte = cast(^let u8) block2;
    let block1_stop = block1_byte + len;

    while (block1_byte != block1_stop) {

        if (block1_byte^ != block2_byte^) {
            return false;
        }

        block1_byte += 1;
        block2_byte += 1;
    }

    return true;
};


let str_equal = fn(a, b: []let u8) -> bool {
    if (a.len != b.len) { return false; }
    return equal(a.raw, b.raw, a.len);
};

let set = fn(dest: ^mut, len: uint, val: u8) -> bool {
    mut cursor = cast(^mut u8) dest;
<<<<<<< HEAD
    let stop = cursor + cast(^mut u8) len;
    while (cursor != stop) {
=======
    let stop = cursor + len;
    while cursor != stop {
>>>>>>> newasm
        cursor^ = val;
        cursor += 1;
    }
};