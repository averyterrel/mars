module memory;

let copy = fn(to, from: addr, len: uint) {
    mut to_byte: ^u8 = to;
    mut from_byte: ^u8 = from;
    let to_stop = to_byte + cast(^u8) len;

    while to_byte != to_stop {

        to_byte^ = from_byte^;

        from_byte += 1;
        to_byte += 1;
    }
};

let equal = fn(block1, block2: addr, len: uint) -> bool {
    mut block1_byte = cast(^u8) block1;
    mut block2_byte = cast(^u8) block2;
    let block1_stop = block1_byte + cast(^u8) len;

    while block1_byte != block1_stop {

        if block1_byte^ != block2_byte^ {
            return false;
        }

        block1_byte += 1;
        block2_byte += 1;
    }

    return true;
};

let str_equal = fn(a, b: []u8) -> bool {
    if a.len != b.len { return false; }
    return equal(a.raw, b.raw, a.len);
};

let set = fn(dest: addr, len: uint, val: u8) -> bool {
    mut cursor = cast(^u8) dest;
    let stop = cursor + cast(^u8) len;
    while cursor != stop {
        cursor^ = val;
        cursor += 1;
    }
};