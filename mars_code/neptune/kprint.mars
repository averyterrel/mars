module neptune;

import mem "../memory";

let PUTC_PORT: uint = 100;

let kprintln = fn(str: []let u8) {
    kprint(str);
    kputc('\n');
};

let kprint = fn(str: []let u8) {
    for i in 0..<str.len {
        kputc(str[i]);
    }
};


let kputc = fn(c: u8) {
    asm(c -> "ra", PUTC_PORT -> "rb") {
        "out rb, ra",
    } 
};

let kprintf = fn(format: []let u8, args: []let) {
    if args.len == 0 {
        kprint(format);
        return;
    }

    mut current_arg: uint = 0;
    for mut i = 0; i < format.len && current_arg < args.len; i += 1; {
        if format[i] != '%' {
            kputc(format[i]);
            continue;
        }
        i += 1;

        if mem::str_equal(format[i:i+3], "int") {
            print_integer(cast(uint) &cast(^let int)args[current_arg], 64, true, 10);
            i += 2;
            current_arg += 1;
            continue;
        }
        if mem::str_equal(format[i:i+4], "uint") {
            print_integer(cast(uint) &cast(^let uint)args[current_arg], 64, false, 10);
            i += 3;
            current_arg += 1;
            continue;
        }
    }
};

let print_integer = fn(value: uint, bitsize: uint, signed: bool, base: u8) {
    
    
    // implementation pending 
};