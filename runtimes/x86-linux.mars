module core;

when instrinsics::arch == .x86 && intrinsics::system == .linux {

    instrinsics::assert(sizeof uint  == 4);
    instrinsics::assert(sizeof []let == 8);

    let _ = fn #symbol("_start") #cconv("sysv") () {

        let cstrlen = fn(cstr: ^let u8) -> uint {
            mut len = 0;
            while cstr[len] != '\0' do len += 1;
            return len;
        };

        mut argc_ptr: ^mut;

        // set base pointer to zero, as is convention
        asm (0 -> "ebp");

        // retrieve stack pointer
        asm (argc_ptr <- "esp");

        // our goal here is to turn C's dumb char* args
        // into based & marspilled gigachad []let u8
        mut c_argv = cast(^let ^let u8) argc_ptr + sizeof(uint)
        mut argc = (cast(^mut uint) argc_ptr)^; // argc is on at stackptr

        mut argv: []mut []let u8 = ---;
        argv.len = argc;

        // allocate some quick stack space for our argv.
        asm (argc * sizeof(argv[0]) -> "gpr offset", argv.raw <- "esp") {
            "sub esp, offset"
        }

        for i in 0..<argc {
            argv[i].raw = c_argv[i];
            argv[i].len = cstrlen(c_argv[i]);
        }

        // TODO get the environment string array and marspill it

        let ret = 0;
        ret = instrinsics::main(argv);
        asm (60 -> "eax", ret -> "ebx") {
            "syscall"
        }
    };
}

//at linux program start, this is the stack state, at esp
//on x86, its +4. on x86_64, its +8. in the diagram, we assume x86

// argc     | argv[0] | argv[1] | ... | argv[argc-1]   | argc[argc] == NULL   | envp[0] | ... | envp[?] == NULL
// esp + 0  | esp + 4 | esp + 8 | ... | esp + 4 * argc | esp + 4 * (argc + 1) | ...     

/*
let _start = #cconv("sysv") fn() {
    let argv : []mut []let u8;
    let sp = ^mut;
    let ptr_size = sizeof(int); //in mars, sizeof(int) == sizeof(^let) 

    asm(sp <- esp) {} //sp = argc
    
    let argc = (transmute(^u32)sp)^;

    argv.raw = linux_3::alloca((argc + 1)*sizeof(argv[0]));
    argv.len = argc;

    for i in 0..<argc {
        argv[i].raw = (transmute(^let u8)(sp + i * ptr_size);
        let len = 0;
        for j in 0..<argc*ptr_size {
            if argv[i].raw[j] == 0 break;
            len += 1;
        }
        argv[i].len = len;
    }

    argv[argc].raw = 0;
    argv[argc].len = 0;

    let ret : u32 = main(cast([]let []let u8) argv);    
    linux_syscall::exit(ret);
}*/