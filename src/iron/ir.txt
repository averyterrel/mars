IRON Intermediate Representation

note: IR tends to change a lot, so this might be outdated in certain places as I forget to update it.
Let sandwichman know if you spot a place where this happens.

`FeModule` - Modules

    Modules are single compilation units. They hold types, symbols, data (globals), and functions.
    They also serve as contexts, allowing the user to schedule passes, etc.
    IRON tries not to store data as global variables, so some API functions require you to pass 
    the module pointer into them, even if nothing in the module is modified.

`FeSymbol` - Symbols

    Modules hold a symbol table. Symbols are used to identify functions and global data within the module.
    Every function and datum has a symbol associated with it, and vice versa. No two functions/data can share
    a symbol.

    Each symbol has:
        `.name` - The symbol's identifer. This identifier is never mangled and will be emitted as-is in the final code.
        `.function/.data` - A backlink to the function or datum that this symbol is associated with.
        `.binding` - The symbol's visiblity in the final code. See the next list for more information.

    Symbol bindings are:
        `FE_BIND_EXPORT` - This symbol is defined in this module and is globally visible. This is the default.
        `FE_BIND_EXPORT_WEAK` - This symbol is defined in this module and is globally visible, but a strongly-bound symbol in another compilation unit may override it.
        `FE_BIND_LOCAL` - This symbol is defined in this module, but is only locally visible.
        `FE_BIND_IMPORT` - This symbol is defined in another module/object.

`FeFunction` - Functions

    Functions have parameters, returns, stack objects, and basic blocks.
    TODO more here lol

`FeType` - Types
    `FeType` is an index into the module's typegraph. Indices below `_FE_TYPE_SIMPLE_END` are reserved.

    `FE_TYPE_VOID` - Absence of a type. size 0, alignment 0
    `FE_TYPE_BOOL` - `true` or `false`, like a 1-bit integer. size and alignment equivalent to `FE_TYPE_I8`.
    `FE_TYPE_I8`   - 8-bit, two's complement integer
    `FE_TYPE_I16`  - 16-bit, two's complement integer
    `FE_TYPE_I32`  - 32-bit, two's complement integer
    `FE_TYPE_I64`  - 64-bit, two's complement integer
    `FE_TYPE_F16`  - 16-bit floating-point number, referred to in IEEE 754-2008 as 'binary16'
    `FE_TYPE_F32`  - 32-bit floating-point number, referred to in IEEE 754-2008 as 'binary32'
    `FE_TYPE_F64`  - 64-bit floating-point number, referred to in IEEE 754-2008 as 'binary64'

`FeIr` - Instructions

    The following only act on integer types.

    `FE_IR_ADD`  - add two integers
    `FE_IR_SUB`  - subtract two integers
    `FE_IR_IMUL` - multiply two integers as if they are signed
    `FE_IR_UMUL` - multiply two integers as if they are unsigned
    `FE_IR_IDIV` - divide two integers as if they are signed
    `FE_IR_UDIV` - divide two integers as if they are unsigned
    `FE_IR_IMOD` - modulo two integers as if they are signed
    `FE_IR_UMOD` - modulo two integers as if they are unsigned
    `FE_IR_NEG`  - negation

    `FE_IR_SHL` - bitwise shift left
    `FE_IR_ASR` - bitwise arithmetic shift right (copy top bit)
    `FE_IR_LSR` - bitwise logical shift right (zero top bit)

        The following act on boolean values as well.

        `FE_IR_AND` - bitwise and
        `FE_IR_OR`  - bitwise or
        `FE_IR_XOR` - bitwise xor
        `FE_IR_NOT` - bitwise not

    The following only act on floating-point types.

        `FE_IR_FADD` - add two floating-point numbers.
        `FE_IR_FSUB` - subtract two floating-point numbers.
        `FE_IR_FMUL` - multiply two floating-point numbers.
        `FE_IR_FDIV` - divide two floating-point numbers.
        `FE_IR_FMOD` - modulo two floating-point numbers.

    The following comparison instructions produce `FE_TYPE_BOOL`,

        `FE_IR_ULT` - integer unsigned less than (a < b).
        `FE_IR_UGT` - integer unsigned greater than (a > b).
        `FE_IR_ULE` - integer unsigned less than or equal to (a <= b).
        `FE_IR_UGE` - integer unsigned greater than or equal to (a >= b).
        `FE_IR_ILT` - integer signed less than (a < b).
        `FE_IR_IGT` - integer signed greater than (a > b).
        `FE_IR_ILE` - integer signed less than or equal to (a <= b).
        `FE_IR_IGE` - integer signed greater than or equal to (a >= b).
        `FE_IR_EQ`  - integer equality (a == b)
        `FE_IR_NE`  - integer inequality (a != b)